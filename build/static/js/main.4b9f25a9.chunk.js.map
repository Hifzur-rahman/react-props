{"version":3,"sources":["components/App/data.js","components/AnimalCard/AnimalCard.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["name","scientificName","size","diet","additional","notes","link","AnimalCard","showAdditional","className","join","onClick","defaultProps","alertInformation","Object","entries","map","information","alert","App","data","animal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAAe,G,KAAA,CACb,CACEA,KAAM,OACNC,eAAgB,eAChBC,KAAM,MACNC,KAAM,CAAC,SAET,CACEH,KAAM,UACNC,eAAgB,mBAChBC,KAAM,MACNC,KAAM,CAAC,SAAU,WACjBC,WAAY,CACVC,MAAO,8FAGX,CACEL,KAAM,QACNC,eAAgB,eAChBC,KAAM,MACNC,KAAM,CAAC,UACPC,WAAY,CACVC,MAAO,8CACPC,KAAM,0C,cCnBG,SAASC,EAAT,GAOX,IANFH,EAMC,EANDA,WACAD,EAKC,EALDA,KACAH,EAIC,EAJDA,KACAQ,EAGC,EAHDA,eACAP,EAEC,EAFDA,eACAC,EACC,EADDA,KAEA,OACE,sBAAKO,UAAU,iBAAf,UACE,6BAAKT,IACL,6BAAKC,IACL,+BAAKC,EAAL,QACA,gCAAMC,EAAKO,KAAK,MAAhB,OACA,wBAAQC,QAAS,kBAAMH,EAAeJ,IAAtC,0BAmBNG,EAAWK,aAAe,CACxBR,WAAY,CACVC,MAAO,8B,MClCX,SAASG,EAAeJ,GACtB,IAAMS,EAAmBC,OAAOC,QAAQX,GACrCY,KAAI,SAAAC,GAAW,gBAAOA,EAAY,GAAnB,aAA0BA,EAAY,OACrDP,KAAK,MACRQ,MAAML,GAsBOM,MAnBf,WACE,OACE,sBAAKV,UAAU,UAAf,UACE,yCACCW,EAAKJ,KAAI,SAAAK,GAAM,OACd,cAAC,EAAD,CAEErB,KAAMqB,EAAOrB,KACbI,WAAYiB,EAAOjB,WACnBD,KAAMkB,EAAOlB,KACbF,eAAgBoB,EAAOpB,eACvBO,eAAgBA,EAChBN,KAAMmB,EAAOnB,MANRmB,EAAOrB,aCNPsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4b9f25a9.chunk.js","sourcesContent":["export default [\n  {\n    name: 'Lion',\n    scientificName: 'Panthero leo',\n    size: '140',\n    diet: ['meat'],\n  },\n  {\n    name: 'Gorilla',\n    scientificName: 'Gorilla beringei',\n    size: \"205\",\n    diet: ['plants', 'insects'],\n    additional: {\n      notes: 'This is the eastern gorilla. There is also a western gorilla that is a different species.'\n    }\n  },\n  {\n    name: 'Zebra',\n    scientificName: 'Equus quagga',\n    size: \"322\",\n    diet: ['plants'],\n    additional: {\n      notes: 'There are three different species of zebra.',\n      link: 'https://en.wikipedia.org/wiki/Zebra'\n    }\n  }\n]\n\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './AnimalCard.css'\n\nexport default function AnimalCard({\n  additional,\n  diet,\n  name,\n  showAdditional,\n  scientificName,\n  size\n}) {\n  return (\n    <div className=\"animal-wrapper\">\n      <h2>{name}</h2>\n      <h3>{scientificName}</h3>\n      <h4>{size}kg</h4>\n      <div>{diet.join(', ')}.</div>\n      <button onClick={() => showAdditional(additional)}>More Info</button>\n    </div>\n  );\n}\n\n\nAnimalCard.propTypes = {\n  additional: PropTypes.shape({\n    link: PropTypes.string,\n    notes: PropTypes.string\n  }),\n  diet: PropTypes.arrayOf(PropTypes.string).isRequired,\n  name: PropTypes.string.isRequired,\n  scientificName: PropTypes.string.isRequired,\n  showAdditional: PropTypes.func.isRequired,\n  size: PropTypes.number.isRequired,\n}\n\n\nAnimalCard.defaultProps = {\n  additional: {\n    notes: 'No Additional Information'\n  }\n}\n","import React from 'react';\nimport data from './data';\nimport AnimalCard from '../AnimalCard/AnimalCard';\nimport './App.css';\n\nfunction showAdditional(additional) {\n  const alertInformation = Object.entries(additional)\n    .map(information => `${information[0]}: ${information[1]}`)\n    .join('\\n');\n  alert(alertInformation)\n};\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <h1>Animals</h1>\n      {data.map(animal => (\n        <AnimalCard\n          key={animal.name}\n          name={animal.name}\n          additional={animal.additional}\n          diet={animal.diet}\n          scientificName={animal.scientificName}\n          showAdditional={showAdditional}\n          size={animal.size}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}